<section class="namingConventions">
   <h2>Design Considerations</h2>

   <p>When designing the database, we tried to balance the following objectives:</p>
   <ul class='regularDisplay indent'>
     <li>Make the information as easy to interpret & query as possible.</li>
     <li>Present data exactly as it exists in ClinicalTrials.gov.</li>
     <li>Use standard naming conventions. (ie. table names are pluralized; column names are singular.)
     <li>Provide value-added attributes, identify them as such, and keep them separate from the raw ClinicalTrials.gov content. (The <i>Calculated_Values</i> table contains data elements that were derived from existing data.)</li>
     <li>If a short, simple name is as clear as a longer name, use the shorter name.</li>
     <li>Avoid unnecssary, duplicate verbiage. For example: <i>Study.source</i> instead of <i>Study.study_source</i></li>
     <li>Be consistent.  For example, several tables include a ‘description’ value. Name them all <i>description</i> as opposed to some <i>descr</i> and others <i>description</i>.</li>
   </ul>
   <p>It wasn't possible to strictly address every objective; in some cases, compromises were made. For example, the study start date has historically been provided by ClinicalTrials.gov as a month/year. (NLM reported that as of January 19, 2017, some studies will include full dates: mm/dd/yy.) To honor the rule that we display exactly what ClinicalTrials.gov provides, we need to store dates as strings since the day value is missing (without it, the value cannot convert to a proper date). However, string-formatted dates are of limited utility in an analytic database; they can't be used to calculate study duration, identify studies registered within specific time periods, etc. We had long discussions and considered various alternatives to handle these conflicting objectves. When ClinicalTrials.gov reported that going forward, some studies will include full dates, we decided the best compromise would be to provide 2 columns in the Studies table for every date: 1) a string-type that displays exactly what was received & 2) a date-type that can be easily used for date calculations. If the date received has only month/year, it is assigned the first day of the month so it can be converted to a date. So for example, a study with start date June, 2014 will have <i>June, 2014</i> in the start_date_month_year column and <i>06/01/14</i> in the start_date column.</li>


   <h2>Conventions</h2>
   <ul class='regularDisplay indent'>
     <li>Table names are plural.</li>
     <li>Column names are singular.</li>
     <li>All names are underscore-delimited words.</li>
     <li>Every table has an <i>nct_id</i> to link rows to their related study. All study-related data can be linked to the Studies table via the nct_id. To avoid appearing complex and confusing, the schema diagram does not display all relationships to Studies; these relationships can be assumed.</li>
     <li>Every table has a primary key: <i>id</i> with one exception: the Studies table’s primary key is <i>nct_id</i>.</li>
     <li>Columns that end with <i>_id</i> are foreign keys that relate to the table identified by the prefix that appears in front of <i>_id</i>. Each foreign key links to the <i>id</i> column of the parent table. (For example, a row in <i>Facility_Contacts</i> is linked to it’s Facility through the <i>facility_id</i> column. <i>Facility_Contacts.facility_id = Facility.id</i>).</li>
     <li>Columns that end with <i>_date</i> contain date-type values.</li>
     <li>Columns that contain month/year dates are saved as strings in a column with a <i>_month_year</i> suffix. A date-type estimate of the value (using the 1st of the month as the 'day') is stored in an adjacent column with the <i>_date</i> suffix.</li>
     <li>Any column that contains a derived/calculated value is stored in the <i>Calculated_Values</i> table. One exception is the date-type columns in <i>Studies</i> where a day-value of '1' might have been assigned.  The format of dates received from ClinicalTrials.gov are not consistent.  Some studies have actual dates, whereas others have just month/year. We are attempting to avoid confusion that would likely result from storing dates for some studies in <i>Studies</i> table and others in the <i>Calculated_Values</i> table, depending on how the value was received from the ClinicalTrials.gov API.</li>
     <li>Some protocol-related tables have the prefix <i>Design_</i> to distinguish them from the corresponding result-related tables. (ie. <i>Design_Groups</i>  vs. <i>Result_Groups</i> and <i>Design_Outcomes</i> vs. <i>Outcomes</i>) Tables that begin with <i>Design_</i> contain data that was entered when the study was registered.</li>
   </ul>

   <h2>Arms/Groups</h2>
   <ul class='regularDisplay indent'>
     <li>We debated about whether to use the term <i>arm, group</i>, or <i>group_arm</i> when naming tables and columns. (Observational studies have ‘groups’; Interventional studies have ‘arms’; they are effectively the same thing.) We settled on the term 'group' because it probably seems more intuitive to the average person.</li>
     <li>Much of the study result information can be generally categorized as: Baselines, Outcomes, Reported Events, & Participant Milestones/Drop-Withdrawals. Each of these are assoicated with a group of participants which are defined in the Result_Groups table. For example, a 2-arm study (control & experimental) might track the number of subjects affected by 'Haematoma' (a Reported Event). The related information is recorded by group, so this study would have 2 reported events about 'Haematoma', one for the 'control' group and another for the 'experimental' group. ClinicalTrials.gov assigns a unique identifier per-group/per-result-category. These identifiers are stored in the AACT results tables in columns named <i>ctgov_group_code</i>. Result tables also include the column <i>result_group_id</i> which links the result to its associated group in the result_groups table.  It is possible to link a result to the associated group via the <i>result_group_id</i> (ie.  <i>WHERE Reported_Events.result_group_id = Result_Groups.id</i>).  Alternatively, you can link results to the associated group via the NCT_ID and ctgov_group_code (ie. <i>WHERE Reported_Events.nct_id = Result_Groups.nct_id AND Reported_Events.ctgov_group_code=Result_Groups.ctgov_group_code</i>)
   </ul>

</section>
